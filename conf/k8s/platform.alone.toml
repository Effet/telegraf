# must
[[inputs.global_kubernetes]] # 共享 kubernetes client, 不主动采集数据
  k8s_url = "$MASTER_VIP_URL"
  k8s_timeout = "${K8S_TIMEOUT:20s}"
  k8s_bearer_token = "${K8S_BEARER_TOKEN:/run/secrets/kubernetes.io/serviceaccount/token}"
  [inputs.global_kubernetes.k8s_client_config]
      tls_ca = "${K8S_TLS_CA:/run/secrets/kubernetes.io/serviceaccount/ca.crt}"

[[inputs.prometheus_metric]]
  urls = "${ETCD_URLS}"
  metric_name = "etcd"
  exclude_zero_value = true
  tls_ca = "/netdata/dice-ops/dice-config/certificates/etcd-ca.pem"
  tls_cert = "/netdata/dice-ops/dice-config/certificates/etcd-client.pem"
  tls_key = "/netdata/dice-ops/dice-config/certificates/etcd-client-key.pem"
  insecure_skip_verify = true
  [inputs.prometheus_metric.tags]
    addon_id = "etcd"
    addon_type = "etcd"
    edge_cluster = "true"

[[inputs.kube_inventory]]
  interval = "1m"
  namespace = "kube-system"
  url = "$MASTER_VIP_URL"
  # nodes, persistentvolumeclaims, persistentvolumes with all namespace
  resource_include = [ "nodes", "daemonsets", "statefulsets", "deployments", "persistentvolumes", "persistentvolumeclaims"]
  bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
  tls_ca = "/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  
[[inputs.kube_inventory]]
  interval = "1m"
  namespace = "default"
  url = "$MASTER_VIP_URL"
  resource_include = [ "daemonsets", "statefulsets", "deployments" ]
  bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
  tls_ca = "/run/secrets/kubernetes.io/serviceaccount/ca.crt"

# watch event
[[inputs.kube_inventory]]
  url = "$MASTER_VIP_URL"
  bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
  tls_ca = "/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  # enable event watch, will disable all other resource collect
  [inputs.kube_inventory.event_watch]
    enable = true

#  coredns
[[inputs.prometheus_metric]]
  interval = "1m"
  urls = ["http://$CLUSTER_DNS:9153"]
  metric_name = "coredns"
  exclude_zero_value = true
  metric_include = ["coredns_*"]
  [inputs.prometheus_metric.tags]
    edge_cluster = "true"

# k8s apiserver
[[inputs.prometheus_metric]]
  interval = "5m"
  urls = ["$MASTER_VIP_URL"]
  metric_name = "kubernetes_apiserver"
  exclude_zero_value = true
  metric_include = [
    "apiserver_request_duration_seconds",
    "apiserver_request_total",
    "workqueue_depth",
    "workqueue_adds_total",
    "workqueue_queue_duration_seconds",
    "go_goroutines"
  ]
  bearer_token = "${K8S_BEARER_TOKEN:/run/secrets/kubernetes.io/serviceaccount/token}"
  tls_ca = "${K8S_TLS_CA:/run/secrets/kubernetes.io/serviceaccount/ca.crt}"

# ingress
[[inputs.prometheus_metric]]
  interval = "5m"
  metric_name = "kubernetes_ingress"
  exclude_zero_value = true
  metric_include = [
    "nginx_ingress_controller_requests",
    "nginx_ingress_controller_ingress_upstream_latency_seconds*",
  ]
  bearer_token = "${K8S_BEARER_TOKEN:/run/secrets/kubernetes.io/serviceaccount/token}"
  tls_ca = "${K8S_TLS_CA:/run/secrets/kubernetes.io/serviceaccount/ca.crt}"
  # select pod address by label
  [inputs.prometheus_metric.kubernetes_selector]
    enable = true
    port = "10254"
    namespace = "kube-system"
  [inputs.prometheus_metric.kubernetes_selector.label]
    "app.kubernetes.io/name" = "ingress-nginx"

# kube controller
[[inputs.prometheus_metric]]
  interval = "1m"
  metric_name = "kubernetes_controller"
  exclude_zero_value = true
  metric_include = [
    "workqueue_queue_duration_seconds*",
    "workqueue_adds_total",
    "workqueue_depth",
    "rest_client_request_latency_seconds",
    "rest_client_requests_total"
  ]
  bearer_token = "${K8S_BEARER_TOKEN:/run/secrets/kubernetes.io/serviceaccount/token}"
  tls_ca = "${K8S_TLS_CA:/run/secrets/kubernetes.io/serviceaccount/ca.crt}"
  # select pod address by label
  [inputs.prometheus_metric.kubernetes_selector]
    enable = true
    port = "10252"
    namespace = "kube-system"
  [inputs.prometheus_metric.kubernetes_selector.label]
    "component" = "kube-controller-manager"

[[inputs.spark]]
  # urls = []
  ## Set response_timeout (default 5 seconds)
  timeout = "10s"
  job_include = true
  stage_include = false

  [inputs.spark.k8s_service_discovery]
    port = 4040
    namespace = "default"
    name_include = ["spark-thrift-server*"]
    protocol = "TCP"

[[inputs.dice_health]]
  interval = "5m"
  [inputs.dice_health.service_check]
    timeout = "30s"
  [inputs.dice_health.k8s_filter]
    namespace = "default"
    [[inputs.dice_health.k8s_filter.label_filters]]
      key = "dice/component"
      operator = "neq"
      value = ""
