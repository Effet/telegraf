# must
[[inputs.global_kubernetes]] # 共享 kubernetes client, 不主动采集数据
  k8s_url = "$MASTER_VIP_URL"
  k8s_timeout = "${K8S_TIMEOUT:20s}"
  k8s_bearer_token = "${K8S_BEARER_TOKEN:/run/secrets/kubernetes.io/serviceaccount/token}"
  [inputs.global_kubernetes.k8s_client_config]
      tls_ca = "${K8S_TLS_CA:/run/secrets/kubernetes.io/serviceaccount/ca.crt}"

[[inputs.prometheus]]
  urls = $ETCD_URLS
  name_override = "etcd"
  metric_version = 2
  tls_ca = "/netdata/dice-ops/dice-config/certificates/etcd-ca.pem"
  tls_cert = "/netdata/dice-ops/dice-config/certificates/etcd-client.pem"
  tls_key = "/netdata/dice-ops/dice-config/certificates/etcd-client-key.pem"
  insecure_skip_verify = true
  [inputs.prometheus.tags]
    addon_id = "etcd"
    addon_type = "etcd"
    edge_cluster = "true"

[[inputs.kube_inventory]]
  interval = "1m"
  namespace = "kube-system"
  url = "$MASTER_VIP_URL"
  # nodes, persistentvolumeclaims, persistentvolumes with all namespace
  resource_include = [ "nodes", "daemonsets", "statefulsets", "deployments", "persistentvolumes", "persistentvolumeclaims"]
  bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
  tls_ca = "/run/secrets/kubernetes.io/serviceaccount/ca.crt"
  
[[inputs.kube_inventory]]
  interval = "1m"
  namespace = "default"
  url = "$MASTER_VIP_URL"
  resource_include = [ "daemonsets", "statefulsets", "deployments" ]
  bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
  tls_ca = "/run/secrets/kubernetes.io/serviceaccount/ca.crt"

# watch event
# [[inputs.kube_inventory]]
#   url = "$MASTER_VIP_URL"
#   bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
#   tls_ca = "/run/secrets/kubernetes.io/serviceaccount/ca.crt"
#   # enable event watch, will disable all other resource collect
#   [inputs.kube_inventory.event_watch]
#     enable = true

#  coredns
[[inputs.prometheus]]
  interval = "1m"
  urls = ["http://$CLUSTER_DNS:9153"]
  name_override = "coredns"
  metric_version = 2
  fieldpass = ["coredns_*"]
  [inputs.prometheus.tags]
    edge_cluster = "true"

# k8s apiserver
[[inputs.prometheus]]
  interval = "5m"
  urls = ["$MASTER_VIP_URL"]
  name_override = "kubernetes_apiserver"
  metric_version = 2
  fieldpass = [
    "apiserver_request_duration_seconds",
    "apiserver_request_total",
    "workqueue_depth",
    "workqueue_adds_total",
    "workqueue_queue_duration_seconds",
    "go_goroutines"
  ]

# ingress
#[[inputs.prometheus]]
#  interval = "5m"
#  name_override = "kubernetes_ingress"
#  metric_version = 2
#  fieldpass = [
#    "nginx_ingress_controller_requests",
#    "nginx_ingress_controller_ingress_upstream_latency_seconds*",
#  ]
#  kubernetes_label_selector = "app.kubernetes.io/name=ingress-nginx"
#  # select pod address by label
##  [inputs.prometheus.kubernetes_selector]
##    enable = true
##    port = "10254"
##    namespace = "kube-system"

# kube controller
#[[inputs.prometheus]]
#  interval = "1m"
#  name_override = "kubernetes_controller"
#  metric_version = 2
#  fieldpass = [
##    "workqueue_queue_duration_seconds*",
#    "workqueue_adds_total",
#    "workqueue_depth",
#    "rest_client_request_latency_seconds",
#    "rest_client_requests_total"
#  ]
#  kubernetes_label_selector = "component=kube-controller-manager"
#  # select pod address by label
#  [inputs.prometheus.kubernetes_selector]
#    enable = true
#    port = "10252"
#    namespace = "kube-system"

# [[inputs.spark]]
#   # urls = []
#   ## Set response_timeout (default 5 seconds)
#   timeout = "10s"
#   job_include = true
#   stage_include = false
#
#   [inputs.spark.k8s_service_discovery]
#     port = 4040
#     namespace = "default"
#     name_include = ["spark-thrift-server*"]
#     protocol = "TCP"

[[inputs.dice_health]]
  interval = "5m"
  kubernetes_label_selector = "dice/component"
  [inputs.dice_health.service_check]
    timeout = "30s"
